#!/usr/bin/env python3
"""
RGB Keyboard Controller - Main Entry Point
Enhanced version with better error handling and hardware detection
"""

import sys
import os
import logging
import subprocess
from pathlib import Path

# Add the current directory to Python path for relative imports
if __name__ == "__main__":
    current_dir = Path(__file__).parent
    if str(current_dir) not in sys.path:
        sys.path.insert(0, str(current_dir))

# Set up basic logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('RGB_Controller_Main')

def check_root_privileges():
    """Check if running with root privileges"""
    if os.name == 'nt':  # Windows
        import ctypes
        return ctypes.windll.shell32.IsUserAnAdmin()
    else:  # Unix-like (Linux, macOS)
        return os.geteuid() == 0

def check_keyboard_library():
    """Enhanced keyboard library detection"""
    try:
        import keyboard
        logger.info("âœ“ Keyboard library available")
        return True
    except ImportError:
        logger.warning("âš  Keyboard library not found")
        
        # If running as root, try to install it
        if check_root_privileges():
            logger.info("Running as root - attempting to install keyboard library...")
            try:
                result = subprocess.run([
                    sys.executable, '-m', 'pip', 'install', 'keyboard'
                ], check=False, capture_output=True, text=True, timeout=30)
                
                if result.returncode == 0:
                    logger.info("âœ“ Keyboard library installed successfully")
                    # Try importing again
                    try:
                        import keyboard
                        return True
                    except ImportError:
                        logger.warning("Installation succeeded but import still failed")
                else:
                    logger.warning(f"Installation failed: {result.stderr}")
            except Exception as e:
                logger.warning(f"Could not install keyboard library: {e}")
        
        logger.info("ALT+Brightness hotkeys will be disabled")
        return False

def setup_logging():
    """Set up enhanced logging"""
    try:
        from gui.core.constants import APP_NAME
        app_name = APP_NAME
    except:
        app_name = "rgb_controller_finalv3"
    
    # Try to create logs directory
    log_dir = Path(__file__).parent / "logs"
    try:
        log_dir.mkdir(exist_ok=True)
        log_file = log_dir / f"{app_name}_startup.log"
        
        # Set up file handler
        file_handler = logging.FileHandler(log_file, encoding='utf-8')
        file_handler.setLevel(logging.DEBUG)
        file_formatter = logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
        file_handler.setFormatter(file_formatter)
        
        # Add to root logger
        root_logger = logging.getLogger()
        root_logger.addHandler(file_handler)
        root_logger.setLevel(logging.DEBUG)
        
        logger.info(f"âœ“ Logging to: {log_file}")
    except PermissionError:
        logger.warning("Cannot create log directory: Permission denied")
    except Exception as e:
        logger.warning(f"Could not set up file logging: {e}")

def run_gui_application():
    """Run the main GUI application"""
    try:
        logger.info("Starting RGB Controller GUI...")
        
        # Check hardware access permissions
        if not check_root_privileges():
            logger.error("ERROR: This application requires root (administrator) privileges to control keyboard hardware on this system.")
            logger.error("Please run using 'sudo', for example:")
            logger.error("  sudo python3 -m rgb_controller_finalv3")
            return False
        
        # Check keyboard library
        keyboard_available = check_keyboard_library()
        
        # Import and run GUI
        try:
            from gui.controller import main as start_gui_main_loop
            logger.info("âœ“ GUI modules imported successfully")
            
            # Start the GUI
            start_gui_main_loop()
            return True
            
        except ImportError as e:
            logger.critical(f"Failed to import GUI modules: {e}")
            logger.critical("Please ensure all required dependencies are installed")
            return False
        except SyntaxError as e:
            logger.critical(f"Syntax error in GUI modules: {e}")
            logger.critical("Please check the module files for syntax errors")
            return False
        except Exception as e:
            logger.critical(f"An unexpected error occurred while trying to run the GUI: {e}")
            import traceback
            logger.critical(traceback.format_exc())
            return False
            
    except KeyboardInterrupt:
        logger.info("Application interrupted by user")
        return True
    except Exception as e:
        logger.critical(f"Critical error in main application: {e}")
        import traceback
        logger.critical(traceback.format_exc())
        return False

def main():
    """Main entry point"""
    print("ðŸŒˆ RGB Keyboard Controller v3")
    print("===============================")
    
    # Set up logging
    setup_logging()
    
    # Check system requirements
    logger.info(f"Python version: {sys.version}")
    logger.info(f"Platform: {sys.platform}")
    logger.info(f"Running as root: {check_root_privileges()}")
    
    # Run the application
    success = run_gui_application()
    
    if success:
        logger.info("Application completed successfully")
        sys.exit(0)
    else:
        logger.error("Application failed")
        sys.exit(1)

if __name__ == "__main__":
    main()
