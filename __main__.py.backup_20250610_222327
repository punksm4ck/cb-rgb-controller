#!/usr/bin/env python3
"""
Main launcher for the RGB Keyboard Controller application.
This script should be in the root of your project package,
e.g., 'rgb_controller_finalv2/__main__.py'.

To run the application:
1. Ensure your project directory is named correctly (e.g., 'rgb_controller_finalv2').
2. Navigate to the directory *containing* this project directory.
3. Execute: sudo python3 -m rgb_controller_finalv2
   (Replace 'rgb_controller_finalv2' with your actual package name if different)

Alternatively, if inside the project package directory:
   Execute: sudo python3 .
"""

import sys
import os
import logging
import logging.handlers # For RotatingFileHandler
from pathlib import Path
import tkinter as tk # For messagebox in case of early GUI-related errors
from tkinter import messagebox # Explicit import for clarity

# Determine the project root directory dynamically.
# If this file is 'project_root/__main__.py', then Path(__file__).parent is 'project_root'.
PROJECT_ROOT = Path(__file__).resolve().parent
PROJECT_PACKAGE_NAME = PROJECT_ROOT.name # e.g., "rgb_controller_finalv2"

# Add the project root to sys.path to allow 'import gui' etc.
# This is crucial if running `python3 __main__.py` or `python3 .` from within the package dir.
if str(PROJECT_ROOT) not in sys.path:
    sys.path.insert(0, str(PROJECT_ROOT))
# Also add the parent of the project root, which is what `python -m` effectively does
# if PROJECT_ROOT.parent is not the same and not already in sys.path
if str(PROJECT_ROOT.parent) not in sys.path:
    sys.path.insert(0, str(PROJECT_ROOT.parent))


# --- Early Logging Setup (before full app logging is initialized) ---
def setup_early_logging():
    """Setup early logging with proper fallback handling"""
    LOG_FILE_NAME = f"{PROJECT_PACKAGE_NAME}_startup.log"
    EARLY_LOG_PATH = None
    
    # Try primary log location
        # Enhanced keyboard library detection for sudo environment
        keyboard_available = False
        try:
            import keyboard
            keyboard_available = True
            logger.info("Keyboard library successfully imported")
        except ImportError as e:
            logger.warning(f"Keyboard library not available: {e}")
            if os.geteuid() == 0:  # Running as root
                logger.info("Running as root - checking system Python packages")
                try:
                    # Try to install keyboard for system Python if needed
                    subprocess.run([sys.executable, '-m', 'pip', 'install', 'keyboard'], 
                                 check=False, capture_output=True)
                    import keyboard
                    keyboard_available = True
                    logger.info("Keyboard library installed and imported successfully")
                except Exception as install_error:
                    logger.warning(f"Could not install keyboard library: {install_error}")
        
        if not keyboard_available:
            logger.warning("ALT+Brightness hotkeys will be disabled")
    try:
        EARLY_LOG_DIR = PROJECT_ROOT / "logs"
        EARLY_LOG_DIR.mkdir(parents=True, exist_ok=True)
        # Test if we can actually write to this directory
        test_path = EARLY_LOG_DIR / LOG_FILE_NAME
        with open(test_path, 'a', encoding='utf-8') as test_file:
            test_file.write("")  # Test write
        EARLY_LOG_PATH = test_path
    except (OSError, PermissionError) as e:
        print(f"Cannot use primary log directory: {e}", file=sys.stderr)
        # Try fallback location
            # Enhanced keyboard library detection for sudo environment
        keyboard_available = False
        try:
            import keyboard
            keyboard_available = True
            logger.info("Keyboard library successfully imported")
        except ImportError as e:
            logger.warning(f"Keyboard library not available: {e}")
            if os.geteuid() == 0:  # Running as root
                logger.info("Running as root - checking system Python packages")
                try:
                    # Try to install keyboard for system Python if needed
                    subprocess.run([sys.executable, '-m', 'pip', 'install', 'keyboard'], 
                                 check=False, capture_output=True)
                    import keyboard
                    keyboard_available = True
                    logger.info("Keyboard library installed and imported successfully")
                except Exception as install_error:
                    logger.warning(f"Could not install keyboard library: {install_error}")
        
        if not keyboard_available:
            logger.warning("ALT+Brightness hotkeys will be disabled")
    try:
            fallback_dir = Path.home() / ".cache" / PROJECT_PACKAGE_NAME
            fallback_dir.mkdir(parents=True, exist_ok=True)
            test_path = fallback_dir / LOG_FILE_NAME
            with open(test_path, 'a', encoding='utf-8') as test_file:
                test_file.write("")  # Test write
            EARLY_LOG_PATH = test_path
        except (OSError, PermissionError) as e2:
            print(f"Cannot use fallback log directory: {e2}", file=sys.stderr)
            # Try temp directory as last resort
                # Enhanced keyboard library detection for sudo environment
        keyboard_available = False
        try:
            import keyboard
            keyboard_available = True
            logger.info("Keyboard library successfully imported")
        except ImportError as e:
            logger.warning(f"Keyboard library not available: {e}")
            if os.geteuid() == 0:  # Running as root
                logger.info("Running as root - checking system Python packages")
                try:
                    # Try to install keyboard for system Python if needed
                    subprocess.run([sys.executable, '-m', 'pip', 'install', 'keyboard'], 
                                 check=False, capture_output=True)
                    import keyboard
                    keyboard_available = True
                    logger.info("Keyboard library installed and imported successfully")
                except Exception as install_error:
                    logger.warning(f"Could not install keyboard library: {install_error}")
        
        if not keyboard_available:
            logger.warning("ALT+Brightness hotkeys will be disabled")
    try:
                import tempfile
                temp_dir = Path(tempfile.gettempdir()) / PROJECT_PACKAGE_NAME
                temp_dir.mkdir(parents=True, exist_ok=True)
                test_path = temp_dir / LOG_FILE_NAME
                with open(test_path, 'a', encoding='utf-8') as test_file:
                    test_file.write("")  # Test write
                EARLY_LOG_PATH = test_path
            except (OSError, PermissionError) as e3:
                print(f"Cannot use temp log directory: {e3}. Logging to console only.", file=sys.stderr)
                EARLY_LOG_PATH = None

    # Setup logging handlers
    log_handlers = []
    
    # Add file handler only if we have a valid path
    if EARLY_LOG_PATH:
            # Enhanced keyboard library detection for sudo environment
        keyboard_available = False
        try:
            import keyboard
            keyboard_available = True
            logger.info("Keyboard library successfully imported")
        except ImportError as e:
            logger.warning(f"Keyboard library not available: {e}")
            if os.geteuid() == 0:  # Running as root
                logger.info("Running as root - checking system Python packages")
                try:
                    # Try to install keyboard for system Python if needed
                    subprocess.run([sys.executable, '-m', 'pip', 'install', 'keyboard'], 
                                 check=False, capture_output=True)
                    import keyboard
                    keyboard_available = True
                    logger.info("Keyboard library installed and imported successfully")
                except Exception as install_error:
                    logger.warning(f"Could not install keyboard library: {install_error}")
        
        if not keyboard_available:
            logger.warning("ALT+Brightness hotkeys will be disabled")
    try:
            early_log_file_handler = logging.handlers.RotatingFileHandler(
                EARLY_LOG_PATH, maxBytes=1*1024*1024, backupCount=2, encoding='utf-8'
            )
            early_log_file_handler.setFormatter(logging.Formatter(
                '%(asctime)s - %(name)s - [%(levelname)s] %(module)s:%(lineno)d - %(message)s'
            ))
            log_handlers.append(early_log_file_handler)
        except Exception as e:
            print(f"Failed to create file log handler: {e}. Using console only.", file=sys.stderr)
            EARLY_LOG_PATH = None

    # Always add console handler
    early_console_handler = logging.StreamHandler(sys.stderr) 
    early_console_handler.setFormatter(logging.Formatter('[%(levelname)s] %(name)s: %(message)s'))
    early_console_handler.setLevel(logging.WARNING) 
    log_handlers.append(early_console_handler)

    # Configure basic logging
    logging.basicConfig(level=logging.DEBUG, handlers=log_handlers, force=True)
    
    return EARLY_LOG_PATH

# Setup logging
EARLY_LOG_PATH = setup_early_logging()

# Create a specific logger for __main__ early messages
main_logger = logging.getLogger(f"{PROJECT_PACKAGE_NAME}.Main")
main_logger.info(f"Early logging initialized. Log file: {EARLY_LOG_PATH if EARLY_LOG_PATH else 'Console Only'}")
main_logger.debug(f"Initial sys.path: {sys.path}")
main_logger.debug(f"PROJECT_ROOT: {PROJECT_ROOT}")
main_logger.debug(f"PROJECT_PACKAGE_NAME: {PROJECT_PACKAGE_NAME}")
main_logger.debug(f"Current working directory: {os.getcwd()}")


# --- Global Exception Hook ---
def global_exception_handler(exc_type, exc_value, exc_traceback):
    exception_logger = logging.getLogger("GlobalExceptionHandler") 
    exception_logger.critical("Unhandled global exception caught!", exc_info=(exc_type, exc_value, exc_traceback))
    error_message = (
        "A critical unhandled error occurred. The application may need to close.\n\n"
        f"Error Type: {exc_type.__name__}\nMessage: {exc_value}\n\n"
        "Please check the application logs for detailed information.\n"
        f"Startup Log: {EARLY_LOG_PATH if EARLY_LOG_PATH else 'Not available'}"
    )
        # Enhanced keyboard library detection for sudo environment
        keyboard_available = False
        try:
            import keyboard
            keyboard_available = True
            logger.info("Keyboard library successfully imported")
        except ImportError as e:
            logger.warning(f"Keyboard library not available: {e}")
            if os.geteuid() == 0:  # Running as root
                logger.info("Running as root - checking system Python packages")
                try:
                    # Try to install keyboard for system Python if needed
                    subprocess.run([sys.executable, '-m', 'pip', 'install', 'keyboard'], 
                                 check=False, capture_output=True)
                    import keyboard
                    keyboard_available = True
                    logger.info("Keyboard library installed and imported successfully")
                except Exception as install_error:
                    logger.warning(f"Could not install keyboard library: {install_error}")
        
        if not keyboard_available:
            logger.warning("ALT+Brightness hotkeys will be disabled")
    try:
        temp_root = tk.Tk(); temp_root.withdraw() 
        messagebox.showerror("Fatal Application Error", error_message, parent=temp_root)
        if temp_root.winfo_exists(): temp_root.destroy()
    except Exception: pass # Avoid errors in error handling
    sys.__excepthook__(exc_type, exc_value, exc_traceback)
sys.excepthook = global_exception_handler


def run_gui_application():
    logger = logging.getLogger(f"{PROJECT_PACKAGE_NAME}.GUILauncher")
    logger.info("Attempting to launch GUI application...")
    
    # --- DEBUGGING PRINTS FOR IMPORTS ---
    logger.debug(f"Python version: {sys.version}")
    logger.debug(f"Running as user: {os.geteuid() if hasattr(os, 'geteuid') else 'N/A'}")
    logger.debug(f"Current sys.path before 'from gui.controller' import: {sys.path}")
    
    # Check what Python sees as the package root and the gui subfolder
    # When running `python -m rgb_controller_finalv2`, PROJECT_ROOT is .../rgb_controller_finalv2
    # The import `from gui.controller` will look for `gui` in sys.path entries.
    # If `~/Downloads/RGB/finals` is in sys.path, it would look for `~/Downloads/RGB/finals/gui` (wrong)
    # If `~/Downloads/RGB/finals/rgb_controller_finalv2` is in sys.path, it looks for `~/Downloads/RGB/finals/rgb_controller_finalv2/gui` (correct)

    # Check relative to where __main__.py is (PROJECT_ROOT)
    gui_dir_path = PROJECT_ROOT / "gui"
    controller_file_path = gui_dir_path / "controller.py"
    gui_init_file_path = gui_dir_path / "__init__.py"

    logger.debug(f"Expected path for gui/: {gui_dir_path}")
    logger.debug(f"Does gui/ exist? {gui_dir_path.exists()}")
    logger.debug(f"Is gui/ a directory? {gui_dir_path.is_dir()}")
    logger.debug(f"Expected path for gui/__init__.py: {gui_init_file_path}")
    logger.debug(f"Does gui/__init__.py exist? {gui_init_file_path.exists()}")
    logger.debug(f"Is gui/__init__.py a file? {gui_init_file_path.is_file()}")
    logger.debug(f"Expected path for gui/controller.py: {controller_file_path}")
    logger.debug(f"Does gui/controller.py exist? {controller_file_path.exists()}")
    logger.debug(f"Is gui/controller.py a file? {controller_file_path.is_file()}")

    if gui_dir_path.is_dir():
        logger.debug(f"Contents of {gui_dir_path}: {os.listdir(gui_dir_path)}")
    # --- END DEBUGGING PRINTS ---

        # Enhanced keyboard library detection for sudo environment
        keyboard_available = False
        try:
            import keyboard
            keyboard_available = True
            logger.info("Keyboard library successfully imported")
        except ImportError as e:
            logger.warning(f"Keyboard library not available: {e}")
            if os.geteuid() == 0:  # Running as root
                logger.info("Running as root - checking system Python packages")
                try:
                    # Try to install keyboard for system Python if needed
                    subprocess.run([sys.executable, '-m', 'pip', 'install', 'keyboard'], 
                                 check=False, capture_output=True)
                    import keyboard
                    keyboard_available = True
                    logger.info("Keyboard library installed and imported successfully")
                except Exception as install_error:
                    logger.warning(f"Could not install keyboard library: {install_error}")
        
        if not keyboard_available:
            logger.warning("ALT+Brightness hotkeys will be disabled")
    try:
        from gui.controller import main as start_gui_main_loop 
        
        logger.info("Successfully imported GUI main function from gui.controller.")
        start_gui_main_loop() 
        logger.info("GUI main loop exited.")

    except ImportError as e:
        logger.critical(f"Failed to import GUI components: {e}", exc_info=True)
        detailed_error = (
            "A critical component (gui.controller) could not be loaded.\n"
            "This usually means the application files are not correctly structured or Python cannot find them.\n\n"
            f"Details: {e}\n\n"
            "Ensure:\n"
            f"1. You are running from the directory containing '{PROJECT_PACKAGE_NAME}' (i.e., '{PROJECT_ROOT.parent}').\n"
            f"2. The directory '{PROJECT_PACKAGE_NAME}/gui/' exists.\n"
            f"3. The file '{PROJECT_PACKAGE_NAME}/gui/__init__.py' exists (can be empty).\n"
            f"4. The file '{PROJECT_PACKAGE_NAME}/gui/controller.py' exists."
        )
            # Enhanced keyboard library detection for sudo environment
        keyboard_available = False
        try:
            import keyboard
            keyboard_available = True
            logger.info("Keyboard library successfully imported")
        except ImportError as e:
            logger.warning(f"Keyboard library not available: {e}")
            if os.geteuid() == 0:  # Running as root
                logger.info("Running as root - checking system Python packages")
                try:
                    # Try to install keyboard for system Python if needed
                    subprocess.run([sys.executable, '-m', 'pip', 'install', 'keyboard'], 
                                 check=False, capture_output=True)
                    import keyboard
                    keyboard_available = True
                    logger.info("Keyboard library installed and imported successfully")
                except Exception as install_error:
                    logger.warning(f"Could not install keyboard library: {install_error}")
        
        if not keyboard_available:
            logger.warning("ALT+Brightness hotkeys will be disabled")
    try:
            temp_root = tk.Tk(); temp_root.withdraw()
            messagebox.showerror("Application Startup Error", detailed_error, parent=temp_root)
            if temp_root.winfo_exists(): temp_root.destroy()
        except: print(f"CRITICAL IMPORT ERROR: {detailed_error}", file=sys.stderr)
        sys.exit(1)
    except Exception as e:
        logger.critical(f"An unexpected error occurred while trying to run the GUI: {e}", exc_info=True)
        sys.exit(1)


def main_entry():
    logger = logging.getLogger(f"{PROJECT_PACKAGE_NAME}.MainEntry") # Use the earlier defined logger
    logger.info(f"RGB Controller application starting from __main__.py (Package: {PROJECT_PACKAGE_NAME})...")
    
    if os.name != 'nt':
        if not hasattr(os, 'geteuid'):
            logger.warning("os.geteuid() not available. Cannot perform root check.")
        elif os.geteuid() != 0:
            error_msg = (
                "ERROR: This application requires root (administrator) privileges "
                "to control keyboard hardware on this system.\n\n"
                "Please run using 'sudo', for example:\n"
                f"  sudo python3 -m {PROJECT_PACKAGE_NAME}"
            )
            logger.error(error_msg)
                # Enhanced keyboard library detection for sudo environment
        keyboard_available = False
        try:
            import keyboard
            keyboard_available = True
            logger.info("Keyboard library successfully imported")
        except ImportError as e:
            logger.warning(f"Keyboard library not available: {e}")
            if os.geteuid() == 0:  # Running as root
                logger.info("Running as root - checking system Python packages")
                try:
                    # Try to install keyboard for system Python if needed
                    subprocess.run([sys.executable, '-m', 'pip', 'install', 'keyboard'], 
                                 check=False, capture_output=True)
                    import keyboard
                    keyboard_available = True
                    logger.info("Keyboard library installed and imported successfully")
                except Exception as install_error:
                    logger.warning(f"Could not install keyboard library: {install_error}")
        
        if not keyboard_available:
            logger.warning("ALT+Brightness hotkeys will be disabled")
    try:
                temp_root = tk.Tk(); temp_root.withdraw()
                messagebox.showerror("Root Privileges Required", error_msg, parent=temp_root)
                if temp_root.winfo_exists(): temp_root.destroy()
            except tk.TclError: print(error_msg, file=sys.stderr)
            except Exception as e_msg: print(f"{error_msg}\n(Additionally, an error occurred showing the message: {e_msg})", file=sys.stderr)
            sys.exit(1)
        else:
            logger.info("Root privileges confirmed.")
    else:
        logger.info("Running on Windows, root check skipped.")

    run_gui_application()

if __name__ == "__main__":
    main_entry()
